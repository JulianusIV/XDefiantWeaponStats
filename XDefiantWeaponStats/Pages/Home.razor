@page "/"
@using ScottPlot
@using ScottPlot.AxisRules
@using ScottPlot.Blazor
@using System.Text.Json

@inject IJSRuntime JS

<script>
    document.getElementsByTagName('body')[0].style = 'max-width: none;';
</script>

<div style="display: flex; flex: 1 1 auto; min-height: 0">
    <div style="width: 250px; overflow: auto; min-height: 0; margin-right: 1rem; padding: 1rem; border: 1px solid var(--nc-bg-3); border-radius: 10px; flex: 0 1 auto;">
        @foreach(var weaponClass in GunlistModel.JsonObject)
        {
            <details open>
                <summary>@weaponClass.Class</summary>
                <ul style="list-style-type: none;">
                    @foreach(var gun in weaponClass.Guns!)
                    {
                        <li>
                            <label>
                                <input type="checkbox" @onchange="eventArgs => { CheckBoxClicked(weaponClass.Class!, gun.Name!, eventArgs.Value); }" />
                                @gun.Name
                            </label>
                        </li>
                    }
                </ul>
            </details>
        }
    </div>

    <div style="overflow: visible; flex: 1 1 auto; display: flex; flex-direction: column;">
        <div style="flex: 0 1 auto; display: flex;">
            <div>
                <input class="custom-radio-input" id="dmg_radio_button" type="radio" name="graph_select" @onchange="@(() => {graphSelector = GraphSelector.Dmg; UpdateView();})" checked />
                <label class="custom-radio-content" for="dmg_radio_button">
                    Damage
                </label>
            </div>
            <div>
                <input class="custom-radio-input" id="stk_radio_button" type="radio" name="graph_select" @onchange="@(() => {graphSelector = GraphSelector.STK; UpdateView();})" />
                <label class="custom-radio-content" for="stk_radio_button">
                    STK
                </label>
            </div>
            <div>
                <input class="custom-radio-input" id="ttk_radio_button" type="radio" name="graph_select" @onchange="@(() => {graphSelector = GraphSelector.TTK; UpdateView();})" />
                <label class="custom-radio-content" for="ttk_radio_button">
                    TTK
                </label>
            </div>
        </div>
        <div style="width: 100%; margin-bottom: 1rem; flex: 1;">
            <div class="Scrollable">
                <BlazorPlot @ref=StatPlot Style="width: 100%; height: 100%" />
            </div>
            <script type="text/javascript">
                $('.Scrollable').on('DOMMouseScroll mousewheel', function (ev) {
                    var prevent = function () {
                        ev.stopPropagation();
                        ev.preventDefault();
                        ev.returnValue = false;
                        return false;
                    }
                    return prevent();
                });
            </script>
        </div>
        <div style="flex: 0 1 90px; height: 90px; display: flex;">
            @if (stkSelected || ttkSelected)
            {
                <div>
                    <input class="custom-check-input" type="checkbox" id="basettk_checkbox" @bind="showBaseTTK" />
                    <label class="custom-check-content" for="basettk_checkbox">
                        Base TTK
                    </label>
                </div>
                <div>
                    <input class="custom-check-input" type="checkbox" id="basephantomttk_checkbox" @bind="showBasePhantomTTK" />
                    <label class="custom-check-content" for="basephantomttk_checkbox">
                        Base Phantom TTK
                    </label>
                </div>
                <div>
                    <input class="custom-check-input" type="checkbox" id="critttk__checkbox" @bind="showCritTTK" />
                    <label class="custom-check-content" for="critttk__checkbox">
                        Optimal TTK
                    </label>
                </div>
                <div>
                    <input class="custom-check-input" type="checkbox" id="critphantomttk_checkbox" @bind="showCritPhantomTTK" />
                    <label class="custom-check-content" for="critphantomttk_checkbox">
                        Optimal Phantom TTK
                    </label>
                </div>
            }
            else
            {
                <div>
                    <input class="custom-check-input" type="checkbox" id="basedmg_checkbox" @bind="showBaseDmg" />
                    <label class="custom-check-content" for="basedmg_checkbox">
                        Base Damage
                    </label>
                </div>
                <div>
                    <input class="custom-check-input" type="checkbox" id="critdmg_checkbox" @bind="showCritDmg" />
                    <label class="custom-check-content" for="critdmg_checkbox">
                        Crit Damage
                    </label>
                </div>
            }
        </div>
    </div>
</div>

@code {
    enum GraphSelector
    {
        Dmg,
        STK,
        TTK
    }
    private GraphSelector graphSelector;
    private bool dmgSelected { get => graphSelector == GraphSelector.Dmg; }
    private bool stkSelected { get => graphSelector == GraphSelector.STK; }
    private bool ttkSelected { get => graphSelector == GraphSelector.TTK; }

    private bool showBaseTTK 
    { 
        get => _showBaseTTK;
        set 
        { 
            _showBaseTTK = value; 
            UpdateView();
        }
    }
    private bool _showBaseTTK = true;
    private bool showBasePhantomTTK 
    { 
        get => _showBasePhantomTTK;
        set
        {
            _showBasePhantomTTK = value;
            UpdateView();
        }
    }
    private bool _showBasePhantomTTK = true;
    private bool showCritTTK 
    {
        get => _showCritTTK;
        set
        {
            _showCritTTK = value;
            UpdateView();
        }
    }
    private bool _showCritTTK = true;
    private bool showCritPhantomTTK 
    {
        get => _showCritPhantomTTK;
        set
        {
            _showCritPhantomTTK = value;
            UpdateView();
        }
    }
    private bool _showCritPhantomTTK = true;

    private bool showBaseDmg
    {
        get => _showBaseDmg;
        set
        {
            _showBaseDmg = value;
            UpdateView();
        }
    }
    private bool _showBaseDmg = true;
    private bool showCritDmg
    {
        get => _showCritDmg;
        set
        {
            _showCritDmg = value;
            UpdateView();
        }
    }
    private bool _showCritDmg = true;

    BlazorPlot StatPlot { get; set; } = new();

    void CheckBoxClicked(string weaponClass, string gunName, object? checkedValue)
    {
        if (checkedValue is bool isChecked)
        {
            GunlistModel.JsonObject.First(x => x.Class == weaponClass).Guns!.First(x => x.Name == gunName).Checked = isChecked;
            UpdateView();
        }
    }

    void UpdateView()
    {
        StatPlot.Plot.Clear();
        StatPlot.Plot.Axes.Rules.Clear();
        switch (graphSelector)
        {
            case GraphSelector.STK:
                StatPlot.Plot.Axes.Left.Label.Text = "Shots to Kill";
                StatPlot.Plot.Axes.Rules.Add(new MaximumBoundary(
                    StatPlot.Plot.Axes.Bottom,
                    StatPlot.Plot.Axes.Left,
                    new AxisLimits(0, 300, 0, 20)));
                StatPlot.Plot.Axes.SetLimits(0, 300, 0, 20);
                break;
            case GraphSelector.TTK:
                StatPlot.Plot.Axes.Left.Label.Text = "Time to Kill";
                StatPlot.Plot.Axes.Rules.Add(new MaximumBoundary(
                    StatPlot.Plot.Axes.Bottom,
                    StatPlot.Plot.Axes.Left,
                    new AxisLimits(0, 300, 0, 1500)));
                StatPlot.Plot.Axes.SetLimits(0, 300, 0, 1500);
                break;
            case GraphSelector.Dmg:
            default:
                StatPlot.Plot.Axes.Left.Label.Text = "Damage";
                StatPlot.Plot.Axes.Rules.Add(new MaximumBoundary(
                    StatPlot.Plot.Axes.Bottom,
                    StatPlot.Plot.Axes.Left,
                    new AxisLimits(0, 300, 0, 140)));
                StatPlot.Plot.Axes.SetLimits(0, 300, 0, 140);
                break;
        }

        foreach(var weaponClass in GunlistModel.JsonObject)
        {
            foreach(var gun in weaponClass.Guns!.Where(x => x.Checked))
            {
                var ranges = gun.Ranges!.ToList();
                ranges.Insert(0, 0);

                var baseDmg = gun.BaseDmg!.ToList();
                baseDmg.Insert(0, baseDmg[0]);

                var critDmg = gun.CritDmg!.ToList();
                critDmg.Insert(0, critDmg[0]);

                var baseTTK = new List<int>();
                var baseTTKPhantom = new List<int>();
                var critTTK = new List<int>();
                var critTTKPhantom = new List<int>();

                var baseSTK = new List<int>();
                var baseSTKPhantom = new List<int>();
                var critSTK = new List<int>();
                var critSTKPhantom = new List<int>();
                for (int i = 0; i < ranges.Count; i++)
                {
                    var msPerRound = 1.0 / ((gun.Rof / 60.0) / 1000.0);

                    baseSTK.Add((int)Math.Round(100.0 / baseDmg[i], MidpointRounding.ToPositiveInfinity));
                    baseSTKPhantom.Add((int)Math.Round(120.0 / baseDmg[i], MidpointRounding.ToPositiveInfinity));
                    critSTK.Add((int)Math.Round(100.0 / critDmg[i], MidpointRounding.ToPositiveInfinity));
                    critSTKPhantom.Add((int)Math.Round(120.0 / critDmg[i], MidpointRounding.ToPositiveInfinity));

                    var burstToKill = (int)Math.Round(baseSTK[i] / (double)gun.ShotsPerTrigger, MidpointRounding.ToPositiveInfinity);
                    baseTTK.Add((int)Math.Round(burstToKill * msPerRound));

                    burstToKill = (int)Math.Round(baseSTKPhantom[i] / (double)gun.ShotsPerTrigger, MidpointRounding.ToPositiveInfinity);
                    baseTTKPhantom.Add((int)Math.Round(burstToKill * msPerRound));

                    burstToKill = (int)Math.Round(critSTK[i] / (double)gun.ShotsPerTrigger, MidpointRounding.ToPositiveInfinity);
                    critTTK.Add((int)Math.Round(burstToKill * msPerRound));

                    burstToKill = (int)Math.Round(critSTKPhantom[i] / (double)gun.ShotsPerTrigger, MidpointRounding.ToPositiveInfinity);
                    critTTKPhantom.Add((int)Math.Round(burstToKill * msPerRound));
                }

                if (dmgSelected)
                {
                    if (showBaseDmg)
                    {
                        var rangeDamageScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), baseDmg.ToArray());
                        rangeDamageScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeDamageScatter.LegendText = $"{gun.Name} Base Damage";
                    }

                    if (showCritDmg)
                    {
                        var rangeCritScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), critDmg.ToArray());
                        rangeCritScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeCritScatter.LegendText = $"{gun.Name} Crit Damage";
                    }
                }

                if (stkSelected)
                {
                    if (gun.ShotsPerTrigger > 1 && GunlistModel.JsonObject.Aggregate(0, (x, n) => x + n.Guns!.Count(y => y.Checked)) == 1)
                    {
                        for (int i = 1; i < 7; i++)
                        {
                            StatPlot.Plot.Add.HorizontalLine(
                                gun.ShotsPerTrigger * i, 
                                2, 
                                Color.FromHex("#D3D3D3"), 
                                LinePattern.Dotted);
                        }
                    }
                    if (showBaseTTK)
                    {
                        var rangeSTKScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), baseSTK.ToArray());
                        rangeSTKScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeSTKScatter.LegendText = $"{gun.Name} Base STK";
                    }

                    if (showBasePhantomTTK)
                    {
                        var rangeSTKPhantomScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), baseSTKPhantom.ToArray());
                        rangeSTKPhantomScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeSTKPhantomScatter.LegendText = $"{gun.Name} Base STK vs Phantom";
                    }

                    if (showCritTTK)
                    {
                        var rangeSTKCritScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), critSTK.ToArray());
                        rangeSTKCritScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeSTKCritScatter.LegendText = $"{gun.Name} Optimal STK";
                    }

                    if (showCritPhantomTTK)
                    {
                        var rangeSTKCritPhantomScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), critSTKPhantom.ToArray());
                        rangeSTKCritPhantomScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeSTKCritPhantomScatter.LegendText = $"{gun.Name} Optimal STK vs Phantom";
                    }
                }

                if (ttkSelected)
                {
                    if (showBaseTTK)
                    {
                        var rangeTTKScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), baseTTK.ToArray());
                        rangeTTKScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeTTKScatter.LegendText = $"{gun.Name} Base TTK";
                    }

                    if (showBasePhantomTTK)
                    {
                        var rangeTTKPhantomScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), baseTTKPhantom.ToArray());
                        rangeTTKPhantomScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeTTKPhantomScatter.LegendText = $"{gun.Name} Base TTK vs Phantom";
                    }

                    if (showCritTTK)
                    {
                        var rangeTTKCritScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), critTTK.ToArray());
                        rangeTTKCritScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeTTKCritScatter.LegendText = $"{gun.Name} Optimal TTK";
                    }

                    if (showCritPhantomTTK)
                    {
                        var rangeTTKCritPhantomScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), critTTKPhantom.ToArray());
                        rangeTTKCritPhantomScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeTTKCritPhantomScatter.LegendText = $"{gun.Name} Optimal TTK vs Phantom";
                    }
                }
            }
        }
        StatPlot.Refresh();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        StatPlot.Plot.Axes.Bottom.Label.Text = "Distance (m)";
        StatPlot.Plot.Style.DarkMode();
    }
}