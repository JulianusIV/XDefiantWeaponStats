@page "/"
@using ScottPlot
@using ScottPlot.AxisRules
@using ScottPlot.Blazor
@using System.Text.Json

<header>XDefiant Weapon Stats</header>

<div style="width: 250px; float: left; margin-right: 1rem">
    @foreach(var weaponClass in GunlistModel.JsonObject)
    {
        <details>
            <summary>@weaponClass.Class</summary>
            <ul style="list-style-type: none;">
                @foreach(var gun in weaponClass.Guns!)
                {
                    <li>
                        <label>
                            <input type="checkbox" @onchange="eventArgs => { CheckBoxClicked(weaponClass.Class!, gun.Name!, eventArgs.Value); }" />
                            @gun.Name
                        </label>
                    </li>
                }
            </ul>
        </details>
    }
    <p>Show Chart</p>
    <ul style="list-style-type: none;">
        <li>
            <label>
                <input type="radio" name="graph_select" @onchange="@(() => {graphSelector = GraphSelector.Dmg; UpdateView();})" checked/>
                Damage
            </label>
        </li>
        <li>
            <label>
                <input type="radio" name="graph_select" @onchange="@(() => {graphSelector = GraphSelector.Crit; UpdateView();})" />
                Crit
            </label>
        </li>
        <li>
            <label>
                <input type="radio" name="graph_select" @onchange="@(() => {graphSelector = GraphSelector.STK; UpdateView();})" />
                STK
            </label>
        </li>
        <li>
            <label>
                <input type="radio" name="graph_select" @onchange="@(() => {graphSelector = GraphSelector.TTK; UpdateView();})" />
                TTK
            </label>
        </li>
    </ul>
    <p>Show TTK/STK Graphs</p>
    <ul style="list-style-type: none;">
        <li>
            <label>
                <input type="checkbox" @bind="showBaseTTK"/>
                Base TTK
            </label>
        </li>
        <li>
            <label>
                <input type="checkbox" @bind="showBasePhantomTTK" />
                Base Phantom TTK
            </label>
        </li>
        <li>
            <label>
                <input type="checkbox" @bind="showCritTTK" />
                Optimal TTK
            </label>
        </li>
        <li>
            <label>
                <input type="checkbox" @bind="showCritPhantomTTK" />
                Optimal Phantom TTK
            </label>
        </li>
    </ul>
</div>

<div style="overflow: hidden">
    <div class="Scrollable">
        <BlazorPlot @ref=StatPlot Style="width: 75vw; height: 100%" />
    </div>
    <script type="text/javascript">
        $('.Scrollable').on('DOMMouseScroll mousewheel', function (ev) {
            var prevent = function () {
                ev.stopPropagation();
                ev.preventDefault();
                ev.returnValue = false;
                return false;
            }
            return prevent();
        });
    </script>
</div>

@code {
    enum GraphSelector
    {
        Dmg,
        Crit,
        STK,
        TTK
    }
    private GraphSelector graphSelector;
    private bool dmgSelected { get => graphSelector == GraphSelector.Dmg; }
    private bool critSelected { get => graphSelector == GraphSelector.Crit; }
    private bool stkSelected { get => graphSelector == GraphSelector.STK; }
    private bool ttkSelected { get => graphSelector == GraphSelector.TTK; }

    private bool showBaseTTK 
    { 
        get => _showBaseTTK;
        set 
        { 
            _showBaseTTK = value; 
            UpdateView();
        }
    }
    private bool _showBaseTTK = true;
    private bool showBasePhantomTTK 
    { 
        get => _showBasePhantomTTK;
        set
        {
            _showBasePhantomTTK = value;
            UpdateView();
        }
    }
    private bool _showBasePhantomTTK = true;
    private bool showCritTTK 
    {
        get => _showCritTTK;
        set
        {
            _showCritTTK = value;
            UpdateView();
        }
    }
    private bool _showCritTTK = true;
    private bool showCritPhantomTTK 
    {
        get => _showCritPhantomTTK;
        set
        {
            _showCritPhantomTTK = value;
            UpdateView();
        }
    }
    private bool _showCritPhantomTTK = true;

    BlazorPlot StatPlot { get; set; } = new();

    void CheckBoxClicked(string weaponClass, string gunName, object? checkedValue)
    {
        if (checkedValue is bool isChecked)
        {
            GunlistModel.JsonObject.First(x => x.Class == weaponClass).Guns!.First(x => x.Name == gunName).Checked = isChecked;
            UpdateView();
        }
    }

    void UpdateView()
    {
        StatPlot.Plot.Clear();
        StatPlot.Plot.Axes.Rules.Clear();
        switch (graphSelector)
        {
            case GraphSelector.Dmg:
                StatPlot.Plot.Axes.Left.Label.Text = "Damage";
                StatPlot.Plot.Axes.Rules.Add(new MaximumBoundary(
                    StatPlot.Plot.Axes.Bottom,
                    StatPlot.Plot.Axes.Left,
                    new AxisLimits(0, 300, 0, 140)));
                StatPlot.Plot.Axes.SetLimits(0, 300, 0, 140);
                break;
            case GraphSelector.Crit:
                StatPlot.Plot.Axes.Left.Label.Text = "Crit Damage";
                StatPlot.Plot.Axes.Rules.Add(new MaximumBoundary(
                    StatPlot.Plot.Axes.Bottom,
                    StatPlot.Plot.Axes.Left,
                    new AxisLimits(0, 300, 0, 140)));
                StatPlot.Plot.Axes.SetLimits(0, 300, 0, 140);
                break;
            case GraphSelector.STK:
                StatPlot.Plot.Axes.Left.Label.Text = "Shots to Kill";
                StatPlot.Plot.Axes.Rules.Add(new MaximumBoundary(
                    StatPlot.Plot.Axes.Bottom,
                    StatPlot.Plot.Axes.Left,
                    new AxisLimits(0, 300, 0, 20)));
                StatPlot.Plot.Axes.SetLimits(0, 300, 0, 20);
                break;
            case GraphSelector.TTK:
                StatPlot.Plot.Axes.Left.Label.Text = "Time to Kill";
                StatPlot.Plot.Axes.Rules.Add(new MaximumBoundary(
                    StatPlot.Plot.Axes.Bottom,
                    StatPlot.Plot.Axes.Left,
                    new AxisLimits(0, 300, 0, 1500)));
                StatPlot.Plot.Axes.SetLimits(0, 300, 0, 1500);
                break;
        }

        foreach(var weaponClass in GunlistModel.JsonObject)
        {
            foreach(var gun in weaponClass.Guns!.Where(x => x.Checked))
            {
                var ranges = gun.Ranges!.ToList();
                ranges.Insert(0, 0);

                var baseDmg = gun.BaseDmg!.ToList();
                baseDmg.Insert(0, baseDmg[0]);

                var critDmg = gun.CritDmg!.ToList();
                critDmg.Insert(0, critDmg[0]);

                var baseTTK = new List<int>();
                var baseTTKPhantom = new List<int>();
                var critTTK = new List<int>();
                var critTTKPhantom = new List<int>();

                var baseSTK = new List<int>();
                var baseSTKPhantom = new List<int>();
                var critSTK = new List<int>();
                var critSTKPhantom = new List<int>();
                for (int i = 0; i < ranges.Count; i++)
                {
                    var msPerRound = 1.0 / ((gun.Rof / 60.0) / 1000.0);

                    baseSTK.Add((int)Math.Round(100.0 / baseDmg[i], MidpointRounding.ToPositiveInfinity));
                    baseSTKPhantom.Add((int)Math.Round(120.0 / baseDmg[i], MidpointRounding.ToPositiveInfinity));
                    critSTK.Add((int)Math.Round(100.0 / critDmg[i], MidpointRounding.ToPositiveInfinity));
                    critSTKPhantom.Add((int)Math.Round(120.0 / critDmg[i], MidpointRounding.ToPositiveInfinity));

                    var burstToKill = (int)Math.Round(baseSTK[i] / (double)gun.ShotsPerTrigger, MidpointRounding.ToPositiveInfinity);
                    baseTTK.Add((int)Math.Round(burstToKill * msPerRound));

                    burstToKill = (int)Math.Round(baseSTKPhantom[i] / (double)gun.ShotsPerTrigger, MidpointRounding.ToPositiveInfinity);
                    baseTTKPhantom.Add((int)Math.Round(burstToKill * msPerRound));

                    burstToKill = (int)Math.Round(critSTK[i] / (double)gun.ShotsPerTrigger, MidpointRounding.ToPositiveInfinity);
                    critTTK.Add((int)Math.Round(burstToKill * msPerRound));

                    burstToKill = (int)Math.Round(critSTKPhantom[i] / (double)gun.ShotsPerTrigger, MidpointRounding.ToPositiveInfinity);
                    critTTKPhantom.Add((int)Math.Round(burstToKill * msPerRound));
                }

                if (dmgSelected)
                {
                    var rangeDamageScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), baseDmg.ToArray());
                    rangeDamageScatter.ConnectStyle = ConnectStyle.StepVertical;
                    rangeDamageScatter.LegendText = gun.Name!;
                }

                if (critSelected)
                {
                    var rangeCritScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), critDmg.ToArray());
                    rangeCritScatter.ConnectStyle = ConnectStyle.StepVertical;
                    rangeCritScatter.LegendText = gun.Name!;
                }

                if (stkSelected)
                {
                    if (gun.ShotsPerTrigger > 1 && GunlistModel.JsonObject.Aggregate(0, (x, n) => x + n.Guns.Count(y => y.Checked)) == 1)
                    {
                        for (int i = 0; i < 5; i++)
                        {
                            StatPlot.Plot.Add.HorizontalLine(
                                gun.ShotsPerTrigger * i, 
                                2, 
                                Color.FromHex("#D3D3D3"), 
                                LinePattern.Dotted);
                        }
                    }
                    if (showBaseTTK)
                    {
                        var rangeSTKScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), baseSTK.ToArray());
                        rangeSTKScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeSTKScatter.LegendText = $"{gun.Name} Base STK";
                    }

                    if (showBasePhantomTTK)
                    {
                        var rangeSTKPhantomScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), baseSTKPhantom.ToArray());
                        rangeSTKPhantomScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeSTKPhantomScatter.LegendText = $"{gun.Name} Base STK vs Phantom";
                    }

                    if (showCritTTK)
                    {
                        var rangeSTKCritScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), critSTK.ToArray());
                        rangeSTKCritScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeSTKCritScatter.LegendText = $"{gun.Name} Optimal STK";
                    }

                    if (showCritPhantomTTK)
                    {
                        var rangeSTKCritPhantomScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), critSTKPhantom.ToArray());
                        rangeSTKCritPhantomScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeSTKCritPhantomScatter.LegendText = $"{gun.Name} Optimal STK vs Phantom";
                    }
                }

                if (ttkSelected)
                {
                    if (showBaseTTK)
                    {
                        var rangeTTKScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), baseTTK.ToArray());
                        rangeTTKScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeTTKScatter.LegendText = $"{gun.Name} Base TTK";
                    }

                    if (showBasePhantomTTK)
                    {
                        var rangeTTKPhantomScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), baseTTKPhantom.ToArray());
                        rangeTTKPhantomScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeTTKPhantomScatter.LegendText = $"{gun.Name} Base TTK vs Phantom";
                    }

                    if (showCritTTK)
                    {
                        var rangeTTKCritScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), critTTK.ToArray());
                        rangeTTKCritScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeTTKCritScatter.LegendText = $"{gun.Name} Optimal TTK";
                    }

                    if (showCritPhantomTTK)
                    {
                        var rangeTTKCritPhantomScatter = StatPlot.Plot.Add.Scatter(ranges.ToArray(), critTTKPhantom.ToArray());
                        rangeTTKCritPhantomScatter.ConnectStyle = ConnectStyle.StepVertical;
                        rangeTTKCritPhantomScatter.LegendText = $"{gun.Name} Optimal TTK vs Phantom";
                    }
                }
            }
        }
        StatPlot.Refresh();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        StatPlot.Plot.Axes.Bottom.Label.Text = "Distance (m)";
        StatPlot.Plot.Style.DarkMode();
    }
}